{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"130\" y=\"110\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"^~fjn_[uZM-`](Oc;;$B\"><field name=\"MOTOR\">Left</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"7V4C*b%MF{.Dm%AhJhuW\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_control_if_elseif_else\" id=\"8=p;bsUAh0(iFBZ=x0ZF\"><mutation branches=\"2\"></mutation><field name=\"BRANCH_BLANK\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_REMOVE\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_ADD\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_add.png</field><value name=\"CONDITION1\"><block type=\"v5_sensing_pressing_controller\" id=\"cp+xRkl*;}hd5P,6T}Io\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL2</field></block></value><statement name=\"SUBSTACK1\"><block type=\"v5_motion_spin\" id=\"U{jKDH7E#Gy]LvhSSE{!\"><field name=\"MOTOR\">Left</field><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"v5_sensing_pressing_controller\" id=\"@zh)Rvb.Lfd!p*l![vTx\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field></block></value><statement name=\"SUBSTACK2\"><block type=\"v5_motion_spin\" id=\"VKEZj)YwJvetX~~xb,6+\"><field name=\"MOTOR\">Left</field><field name=\"DIRECTION\">rev</field></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"v5_motion_stop_motor\" id=\"3)9,BRt^UV^]}`6cIa$d\"><field name=\"MOTOR\">Left</field></block></statement></block></next></block></next></block><block type=\"v5_events_when_started\" id=\"H*mev;e.e.u5o3Q;]k7t\" x=\"110\" y=\"550\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"NIJbkzgY(T|)d.S}~t`b\"><field name=\"MOTOR\">Right</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\";a}gzDkr9-_oG7YX%O-D\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_control_if_elseif_else\" id=\".3BRl@|q9bCoYq9~eRE=\"><mutation branches=\"2\"></mutation><field name=\"BRANCH_BLANK\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_REMOVE\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_ADD\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_add.png</field><value name=\"CONDITION1\"><block type=\"v5_sensing_pressing_controller\" id=\"9O]|^fqUAJ^bspvUd3YW\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field></block></value><statement name=\"SUBSTACK1\"><block type=\"v5_motion_spin\" id=\"ohm2lJd3^HQ/wZTSRf!)\"><field name=\"MOTOR\">Right</field><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"v5_sensing_pressing_controller\" id=\"a[]fn[@F:C*1UZMKABFg\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field></block></value><statement name=\"SUBSTACK2\"><block type=\"v5_motion_spin\" id=\"7qq7`a-`ixZ=1HYtx;Wg\"><field name=\"MOTOR\">Right</field><field name=\"DIRECTION\">rev</field></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"v5_motion_stop_motor\" id=\"2EK`-t2;5P]n;DT?i2!g\"><field name=\"MOTOR\">Right</field></block></statement></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Left","leftDir":"true","right":"Right","rightDir":"true","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.2.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor Left = motor(PORT1, ratio18_1, false);\n\nmotor Right = motor(PORT2, ratio18_1, true);\n\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Left\n      if (Controller1.ButtonL1.pressing()) {\n        Left.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Left.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Left.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Right\n      if (Controller1.ButtonR1.pressing()) {\n        Right.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Right.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Right.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Left.setVelocity(100.0, percent);\n  if (Controller1.ButtonL2.pressing()) {\n    Left.spin(forward);\n  } else if (Controller1.ButtonL1.pressing()) {\n    Left.spin(reverse);\n  } else {\n    Left.stop();\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Right.setVelocity(100.0, percent);\n  if (Controller1.ButtonR2.pressing()) {\n    Right.spin(forward);\n  } else if (Controller1.ButtonR1.pressing()) {\n    Right.spin(reverse);\n  } else {\n    Right.stop();\n  }\n  return 0;\n}\n\n\nint main() {\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}